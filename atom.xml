<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://clyzwangyuyang.github.io</id>
    <title>Gridea</title>
    <updated>2020-02-26T10:38:37.401Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://clyzwangyuyang.github.io"/>
    <link rel="self" href="https://clyzwangyuyang.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://clyzwangyuyang.github.io/images/avatar.png</logo>
    <icon>https://clyzwangyuyang.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[New]]></title>
        <id>https://clyzwangyuyang.github.io/post/new/</id>
        <link href="https://clyzwangyuyang.github.io/post/new/">
        </link>
        <updated>2020-02-26T04:08:46.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-cpp">#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;cstring&gt;

const int N = 1e5 + 100;

int root = 0;

struct SplayTree
{
	int val[N], siz[N], num[N], ch[N][2], fa[N], tot;
	
	void con(int x, int y, int son) { fa[x] = y, ch[y][son] = x; }
	void update(int x)  { siz[x] = siz[ch[x][0]] + siz[ch[x][1]] + num[x]; }
	int dir(int x) {  return ch[fa[x]][0] == x ? 0 : 1; }
	int New(int v, int y) {
		val[ ++ tot] = v;
		siz[tot] = num[tot] = 1;
		fa[tot] = y;
		return tot;
	}
	
	void Rotate(int x) {
		int y = fa[x], ys = dir(x);
		int z = fa[y], zs = dir(y);
		int B = ch[x][ys ^ 1];
		con(B, y, ys), con(y, x, ys ^ 1), con(x, z, zs);
		update(y), update(x);
	}
	
	void Splay(int x, int tar = root) {
		tar = fa[tar];
		for(int y; (y = fa[x]) != tar; Rotate(x)) 
		    if( fa[y] != tar)  Rotate( dir(y) == dir(x) ? y : x);
		if( !tar)  root = x;
	}
	
	void Find(int v) {
		int x = root, res = 0;
		while( x) {
			if( v == val[x])  res = x, x = 0;
			else if( v &gt; val[x])  res = x, x = ch[x][1];
			else if( !ch[x][0] &amp;&amp; !res)  res = x, x = 0;
			else x = ch[x][0];
		}
		Splay(res);
	}
	
	void Insert(int&amp; x, int y, int v) {
		if( !x ) {
			x = New(v, y);
			Splay(x);///
			return; 
		}
		if( v == val[x]) {
			num[x] ++;
			update(x);
			Splay(x);
			return;
		}
		if( v &lt; val[x])  Insert(ch[x][0], x, v);
		else Insert(ch[x][1], x, v);
	}
	
	void Delete(int v) {
		Find(v);
		if( num[root] &gt; 1) {
			num[root] --;
			update(root);
		} else if( !ch[root][0]) {
			fa[root = ch[root][1]] = 0;
		} else if( !ch[root][1]) {
			fa[root = ch[root][0]] = 0;
		} else {
			int x = ch[root][0], tmp = root;
			while( ch[x][1]) x = ch[x][1];
			Splay(x);
			con(ch[tmp][1], x, 1);
			update(x);
		}
	}
	
	int Kth(int nth) {
		int x = root;
		while( true) {
			if( nth &lt;= siz[ch[x][0]])  x = ch[x][0];
			else if( nth &lt;= siz[ch[x][0]] + num[x])  return val[x];
			else nth -= siz[ch[x][0]] + num[x], x = ch[x][1];
		}
	}
	
} tr;
int fa[N];


int main()
{
	int n;
	scanf(&quot;%d&quot;, &amp;n);
	while( n -- ) {
		int opt, x;
		scanf(&quot;%d%d&quot;, &amp;opt, &amp;x);
		if( opt == 1)  tr.Insert(root, 0, x);
		else if( opt == 2)  tr.Delete(x);
		else if( opt == 3) {
			tr.Find(x);
			printf(&quot;%d\n&quot;, tr.siz[tr.ch[root][0]]+ 1);
		} else if( opt == 4) 
			printf(&quot;%d\n&quot;, tr.Kth(x));
		else if( opt == 5) {
			tr.Find(x - 1);
			printf(&quot;%d\n&quot;, tr.val[root]);
		} else {
			tr.Find(x);
			if( tr.val[root] &gt; x)  printf(&quot;%d\n&quot;, tr.val[root]);
			else {
				int o = tr.ch[root][1];
				while( tr.ch[o][0])  o = tr.ch[o][0];
				printf(&quot;%d\n&quot;, tr.val[o]);
			}
		}
	}
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://clyzwangyuyang.github.io/post/hello-gridea/</id>
        <link href="https://clyzwangyuyang.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>